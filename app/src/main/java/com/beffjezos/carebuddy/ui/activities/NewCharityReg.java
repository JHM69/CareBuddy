package com.beffjezos.carebuddy.ui.activities;import android.Manifest;import android.app.ProgressDialog;import android.content.Intent;import android.graphics.Bitmap;import android.net.Uri;import android.os.Bundle;import android.util.Log;import android.view.MenuItem;import android.view.View;import android.widget.Button;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar;import com.afollestad.materialdialogs.DialogAction;import com.afollestad.materialdialogs.MaterialDialog;import com.beffjezos.carebuddy.R;import com.beffjezos.carebuddy.models.Charity;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.android.gms.tasks.Task;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.storage.FirebaseStorage;import com.google.firebase.storage.StorageReference;import com.google.firebase.storage.UploadTask;import com.karumi.dexter.Dexter;import com.karumi.dexter.MultiplePermissionsReport;import com.karumi.dexter.PermissionToken;import com.karumi.dexter.listener.PermissionRequest;import com.karumi.dexter.listener.multi.MultiplePermissionsListener;import com.yalantis.ucrop.UCrop;import java.io.File;import java.util.List;import java.util.Objects;import de.hdodenhof.circleimageview.CircleImageView;import static com.beffjezos.carebuddy.ui.activities.MainActivity.getRandomString;public class NewCharityReg extends AppCompatActivity {    TextView nameTv, addressTv, numberTv, summeryTv, dateTv, mailTv;    DatabaseReference mDb;    private static final int PICK_IMAGE = 100;    public Uri imageUri;    public StorageReference storageReference;    private CircleImageView profile_image;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_new_charity);        Toolbar toolbar = findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        Objects.requireNonNull(getSupportActionBar()).setDisplayHomeAsUpEnabled(true);        getSupportActionBar().setDisplayShowHomeEnabled(true);        askPermission();        mDb = FirebaseDatabase.getInstance().getReference();        nameTv = findViewById(R.id.name);        addressTv = findViewById(R.id.address_name);        numberTv = findViewById(R.id.numeber_name);        summeryTv = findViewById(R.id.summery_name);        mailTv = findViewById(R.id.mail_name);        dateTv = findViewById(R.id.date_name);        Button submit = findViewById(R.id.submitCha);        profile_image = findViewById(R.id.profile_image);        storageReference = FirebaseStorage.getInstance().getReference().child("images");        submit.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                try {                    String name = nameTv.getText().toString();                    String address = addressTv.getText().toString();                    String number = numberTv.getText().toString();                    String mail = mailTv.getText().toString();                    String summery = summeryTv.getText().toString();                    String dateStab = dateTv.getText().toString();                    if (name.length() < 1) {                        Toast.makeText(NewCharityReg.this, "Name is Empty", Toast.LENGTH_SHORT).show();                    } else if (address.length() < 3 || mail.length() < 3) {                        Toast.makeText(NewCharityReg.this, "Address is Empty", Toast.LENGTH_SHORT).show();                    } else if (number.length() < 11 || number.length() > 16) {                        Toast.makeText(NewCharityReg.this, "Numbers is error", Toast.LENGTH_SHORT).show();                    } else if (summery.length() < 1) {                        Toast.makeText(NewCharityReg.this, "Summery is error", Toast.LENGTH_SHORT).show();                    } else if (dateStab.length() < 5) {                        Toast.makeText(NewCharityReg.this, "Date is Empty", Toast.LENGTH_SHORT).show();                    } else {                        createNewCharity(name, address, number, summery, dateStab, mail);                    }                } catch (NullPointerException j) {                }            }        });    }    private void createNewCharity(final String name, final String address, final String number, final String summery, final String dateStab, final String mail) {        final ProgressDialog mDialog;        mDialog = new ProgressDialog(this);        mDialog.setMessage("Please wait..");        mDialog.setIndeterminate(true);        mDialog.setCancelable(false);        mDialog.setCanceledOnTouchOutside(false);        mDialog.show();        final String id = getRandomString();        final StorageReference user_profile = storageReference.child(id + ".png");        user_profile.putFile(imageUri).addOnCompleteListener(new OnCompleteListener<UploadTask.TaskSnapshot>() {            @Override            public void onComplete(@NonNull final Task<UploadTask.TaskSnapshot> task) {                if (task.isSuccessful()) {                    user_profile.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {                        @Override                        public void onSuccess(final Uri uri) {                            Charity charity = new Charity(id, name, address, summery, number, dateStab, uri.toString(), mail);                            Intent intent = new Intent(NewCharityReg.this, VerifyActivity.class);                            intent.putExtra("data", charity);                            startActivity(intent);                            mDialog.dismiss();                        }                    });                } else {                    mDialog.dismiss();                }            }        });    }    @Override    public void onBackPressed() {        new MaterialDialog.Builder(this)                .title("Discard")                .content("Are you sure do you want to go back?")                .positiveText("Yes")                .canceledOnTouchOutside(false)                .cancelable(false)                .onPositive(new MaterialDialog.SingleButtonCallback() {                    @Override                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {                        NewCharityReg.this.finish();                    }                })                .negativeText("No")                .show();    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == 11) {            if (resultCode == RESULT_OK) {                imageUri = data.getData();                // start crop activity                UCrop.Options options = new UCrop.Options();                options.setCompressionFormat(Bitmap.CompressFormat.PNG);                options.setCompressionQuality(70);                options.setShowCropGrid(true);                UCrop.of(imageUri, Uri.fromFile(new File(getCacheDir(), "study_forum_user_profile_picture.png")))                        .withAspectRatio(1, 1)                        .withOptions(options)                        .start(this);            }        }        if (requestCode == UCrop.REQUEST_CROP) {            if (resultCode == RESULT_OK) {                imageUri = UCrop.getOutput(data);                profile_image.setImageURI(imageUri);            } else if (resultCode == UCrop.RESULT_ERROR) {                Log.e("Error", "Crop error:" + UCrop.getError(data).getMessage());            }        }    }    public void setProfilepic(View view) {        Intent intent = new Intent();        intent.setType("image/*");        intent.setAction(Intent.ACTION_GET_CONTENT);        startActivityForResult(Intent.createChooser(intent, "Select Profile Picture"), 11);    }    private void askPermission() {        Dexter.withActivity(this)                .withPermissions(                        Manifest.permission.WRITE_EXTERNAL_STORAGE,                        Manifest.permission.READ_EXTERNAL_STORAGE                )                .withListener(new MultiplePermissionsListener() {                    @Override                    public void onPermissionsChecked(MultiplePermissionsReport report) {                        if (report.isAnyPermissionPermanentlyDenied()) {                            // Toasty.info(RegisterActivity.this, "You have denied some permissions permanently, if the app force close try granting permission from settings.", Toasty.LENGTH_LONG, true).show();                        }                    }                    @Override                    public void onPermissionRationaleShouldBeShown(List<PermissionRequest> permissions, PermissionToken token) {                        token.continuePermissionRequest();                    }                })                .check();    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                onBackPressed();                return true;        }        return super.onOptionsItemSelected(item);    }}
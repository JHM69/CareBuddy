package com.beffjezos.carebuddy.ui.activities;import android.annotation.SuppressLint;import android.content.Intent;import android.database.Cursor;import android.os.Bundle;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.widget.Button;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar;import com.afollestad.materialdialogs.DialogAction;import com.afollestad.materialdialogs.MaterialDialog;import com.beffjezos.carebuddy.R;import com.beffjezos.carebuddy.SqlDonor;import com.beffjezos.carebuddy.models.Package;import com.beffjezos.carebuddy.models.Product;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import java.util.ArrayList;import java.util.List;import java.util.Random;public class MainActivity extends AppCompatActivity {    Button newDonor, newCharity;    public static List<Package> AllProDuctpackageList = new ArrayList<>();    public static Product chal = new Product("Rice", 40, R.drawable.chal, 1, "Kg");    public static Product dhal = new Product("Dhal", 80, R.drawable.dhal, 1, "Kg");    public static Product savan = new Product("Soap", 35, R.drawable.soap, 1, "P");    public static Product tell = new Product("Oil (5 L)", 570, R.drawable.tell, 1, "P");    public static Product alu = new Product("Potato", 40, R.drawable.alu, 1, "Kg");    public static Product salt = new Product("Salt", 29, R.drawable.salt, 1, "Kg");    public static Product peyaj = new Product("Onion", 89, R.drawable.peyaj, 1, "Kg");    public static Product savlon = new Product("Savlon Antiseptic", 32, R.drawable.savlon, 1, "Kg");    public static Product tisu = new Product("Toilet Tissue", 25, R.drawable.tisu, 1, "P");    public static Product hairOil = new Product("Hair Oil", 115, R.drawable.hairrrr, 1, "P");    public static Product toothpaste = new Product("Toothpaste", 180, R.drawable.toothpaste, 1, "P");    public static Product brash = new Product("ToothBrash", 80, R.drawable.brash, 1, "P");    public static Product gamsa = new Product("Gamcha", 160, R.drawable.gamcha, 1, "P");    public static Product nestum = new Product("Nestle Nestum", 860, R.drawable.nestum, 1, "P");    public static Product lotion = new Product("Moisture Lotion", 360, R.drawable.babylo, 1, "P");    public static Product feeder = new Product("Baby Feeder", 295, R.drawable.feeder, 1, "P");    public static Product bshampho = new Product("Baby Shampoo", 475, R.drawable.bshampo, 1, "P");    public static Product bdyper = new Product("Baby Diaper", 899, R.drawable.dyper, 1, "P");    public static String getRandomString() {        String SALTCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789";        StringBuilder salt = new StringBuilder();        Random rnd = new Random();        while (salt.length() < 14) { // length of the random string.            int index = (int) (rnd.nextFloat() * SALTCHARS.length());            salt.append(SALTCHARS.charAt(index));        }        String saltStr = salt.toString();        return saltStr;    }    String name;    @Override    public boolean onCreateOptionsMenu(Menu menu) {        MenuInflater menuInflater = getMenuInflater();        menuInflater.inflate(R.menu.menu, menu);        return super.onCreateOptionsMenu(menu);    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case R.id.cart:                //Cart                return true;            default:                return super.onOptionsItemSelected(item);        }    }    @SuppressLint("SetTextI18n")    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        Toolbar toolbar = findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        SqlDonor sqlDonor = new SqlDonor(getApplicationContext());        getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_baseline_search_24);// set drawable icon        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        Cursor rs = null;        name = null;        final String imag = null;        try {            rs = sqlDonor.getData(1);            rs.moveToFirst();            name = rs.getString(rs.getColumnIndex(SqlDonor.CONTACTS_COLUMN_NAME));        } catch (RuntimeException g) {        }        if (!rs.isClosed()) {            rs.close();        }        newDonor = findViewById(R.id.newDonor);        newCharity = findViewById(R.id.newCharity);        if (FirebaseAuth.getInstance().getCurrentUser() != null) {            FirebaseDatabase.getInstance().getReference().child("Charities").child(FirebaseAuth.getInstance().getCurrentUser().getUid()).child("name").addValueEventListener(new ValueEventListener() {                @Override                public void onDataChange(DataSnapshot snapshot) {                    newCharity.setText("View Donations To " + snapshot.getValue());                    newCharity.setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View view) {                            startActivity(new Intent(getApplicationContext(), CharityActivity.class));                        }                    });                }                @Override                public void onCancelled(DatabaseError databaseError) {                }            });        } else {            newCharity.setText("Register your Charity");            newCharity.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View view) {                    startActivity(new Intent(getApplicationContext(), NewCharityReg.class));                }            });        }        if (name != null) {            newDonor.setText("Donating as " + name);        } else {            newDonor.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View view) {                    startActivity(new Intent(getApplicationContext(), NewDonorReg.class));                }            });        }        findViewById(R.id.cardView).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                startActivity(new Intent(getApplicationContext(), CharitiesList.class));            }        });        findViewById(R.id.fudhgdrg).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (name != null) {                    startActivity(new Intent(getApplicationContext(), CategoryActivity.class));                } else {                    MaterialDialog dialog;                    new MaterialDialog.Builder(MainActivity.this)                            .title("You are not registered as a Donor")                            .content("Become a Donor to Donate?")                            .positiveText("Yes")                            .negativeText("No")                            .canceledOnTouchOutside(false)                            .cancelable(false)                            .onPositive(new MaterialDialog.SingleButtonCallback() {                                @Override                                public void onClick(MaterialDialog dialog, DialogAction which) {                                    startActivity(new Intent(getApplicationContext(), NewDonorReg.class));                                }                            })                            .onNegative(new MaterialDialog.SingleButtonCallback() {                                @Override                                public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {                                }                            })                            .build().show();                }            }        });        findViewById(R.id.cardView3).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (name != null) {                    startActivity(new Intent(getApplicationContext(), CharitiesList.class));                } else {                    MaterialDialog dialog;                    new MaterialDialog.Builder(MainActivity.this)                            .title("You are not registered as a Donor")                            .content("Become a Donor to Donate?")                            .positiveText("Yes")                            .negativeText("No")                            .canceledOnTouchOutside(false)                            .cancelable(false)                            .onPositive(new MaterialDialog.SingleButtonCallback() {                                @Override                                public void onClick(MaterialDialog dialog, DialogAction which) {                                    startActivity(new Intent(getApplicationContext(), NewDonorReg.class));                                }                            })                            .onNegative(new MaterialDialog.SingleButtonCallback() {                                @Override                                public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {                                }                            })                            .build().show();                }            }        });        List<Product> helpPackage1ProductList = new ArrayList<Product>();        chal.setQuantity(5);        helpPackage1ProductList.add(chal);        dhal.setQuantity(2);        helpPackage1ProductList.add(dhal);        peyaj.setQuantity(2);        helpPackage1ProductList.add(peyaj);        savan.setQuantity(1);        helpPackage1ProductList.add(savan);        tell.setQuantity(1);        helpPackage1ProductList.add(tell);        alu.setQuantity(5);        helpPackage1ProductList.add(alu);        String des = "";        for (int i = 0; i < helpPackage1ProductList.size(); i++) {            des += (helpPackage1ProductList.get(i).getName()) + (" ") + (helpPackage1ProductList.get(i).getQuantity()) + (" ") + (helpPackage1ProductList.get(i).getUnit()) + (", ");        }        assert des != null;        Package helpPackage1 = new Package(helpPackage1ProductList, "Corona Help Package", des, R.drawable.package1);        AllProDuctpackageList.add(helpPackage1);        List<Product> helpPackage2ProductList = new ArrayList<Product>();        chal.setQuantity(3);        tell.setQuantity(1);        salt.setQuantity(1);        savan.setQuantity(1);        peyaj.setQuantity(1);        dhal.setQuantity(1);        alu.setQuantity(3);        helpPackage2ProductList.add(chal);        helpPackage2ProductList.add(dhal);        helpPackage2ProductList.add(salt);        helpPackage2ProductList.add(peyaj);        helpPackage2ProductList.add(savan);        helpPackage2ProductList.add(tell);        helpPackage2ProductList.add(alu);        String dfes = "";        for (int i = 0; i < helpPackage2ProductList.size(); i++) {            dfes += (helpPackage2ProductList.get(i).getName()) + (" ") + (helpPackage2ProductList.get(i).getQuantity()) + (" ") + (helpPackage2ProductList.get(i).getUnit()) + (", ");        }        assert dfes != null;        Package helpPackage2 = new Package(helpPackage2ProductList, "Grocery", dfes, R.drawable.ic_logo);        AllProDuctpackageList.add(helpPackage2);        List<Product> helpPackage3ProductList = new ArrayList<Product>();        savlon.setQuantity(2);        tisu.setQuantity(2);        savan.setQuantity(5);        hairOil.setQuantity(1);        toothpaste.setQuantity(1);        brash.setQuantity(2);        gamsa.setQuantity(2);        helpPackage3ProductList.add(savlon);        helpPackage3ProductList.add(savan);        helpPackage3ProductList.add(tisu);        helpPackage3ProductList.add(hairOil);        helpPackage3ProductList.add(toothpaste);        helpPackage3ProductList.add(brash);        helpPackage3ProductList.add(gamsa);        String efe = "";        for (int i = 0; i < helpPackage3ProductList.size(); i++) {            efe += (helpPackage3ProductList.get(i).getName()) + (" ") + (helpPackage3ProductList.get(i).getQuantity()) + (" ") + (helpPackage3ProductList.get(i).getUnit()) + (", ");        }        assert efe != null;        Package helpPackage3 = new Package(helpPackage3ProductList, "Hygiene", efe, R.drawable.ic_logo);        AllProDuctpackageList.add(helpPackage3);        List<Product> helpPackage4ProductList = new ArrayList<Product>();        nestum.setQuantity(1);        lotion.setQuantity(1);        feeder.setQuantity(1);        bshampho.setQuantity(1);        bdyper.setQuantity(1);        helpPackage4ProductList.add(nestum);        helpPackage4ProductList.add(lotion);        helpPackage4ProductList.add(feeder);        helpPackage4ProductList.add(bshampho);        helpPackage4ProductList.add(bdyper);        String efce = "";        for (int i = 0; i < helpPackage4ProductList.size(); i++) {            efce += (helpPackage4ProductList.get(i).getName()) + (" ") + (helpPackage4ProductList.get(i).getQuantity()) + (" ") + (helpPackage4ProductList.get(i).getUnit()) + (", ");        }        assert efce != null;        Package helpPackage4 = new Package(helpPackage3ProductList, "Baby Care", efce, R.drawable.ic_logo);        AllProDuctpackageList.add(helpPackage4);    }    @Override    public void onBackPressed() {        new MaterialDialog.Builder(this)                .title("Exit?")                .content("Are you sure?")                .positiveText("Yes")                .canceledOnTouchOutside(false)                .cancelable(false)                .onPositive(new MaterialDialog.SingleButtonCallback() {                    @Override                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {                        finishAffinity();                    }                })                .negativeText("No")                .show();    }    @Override    public void onResume() {  // After a pause OR at startup        super.onResume();        SqlDonor sqlDonor = new SqlDonor(getApplicationContext());        Cursor rs = null;        name = null;        final String imag = null;        try {            rs = sqlDonor.getData(1);            rs.moveToFirst();            name = rs.getString(rs.getColumnIndex(SqlDonor.CONTACTS_COLUMN_NAME));        } catch (RuntimeException g) {        }        if (!rs.isClosed()) {            rs.close();        }        if (name != null) {            newDonor.setText("Donating as " + name);        } else {            newDonor.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View view) {                    startActivity(new Intent(getApplicationContext(), NewDonorReg.class));                }            });        }    }}